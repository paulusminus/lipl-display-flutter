// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Peripheral {
  Stream<LiplDisplay> gattListen(
      {required String part,
      required String status,
      required bool darkMode,
      required double fontSize,
      required double fontSizeIncrement,
      dynamic hint});
}

class LiplDisplay {
  final String part;
  final String status;
  final bool darkMode;
  final double fontSize;

  LiplDisplay({
    required this.part,
    required this.status,
    required this.darkMode,
    required this.fontSize,
  });
}

class PeripheralImpl extends FlutterRustBridgeBase<PeripheralWire>
    implements Peripheral {
  factory PeripheralImpl(ffi.DynamicLibrary dylib) =>
      PeripheralImpl.raw(PeripheralWire(dylib));

  PeripheralImpl.raw(PeripheralWire inner) : super(inner);

  Stream<LiplDisplay> gattListen(
          {required String part,
          required String status,
          required bool darkMode,
          required double fontSize,
          required double fontSizeIncrement,
          dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_gatt_listen(
            port_,
            _api2wire_String(part),
            _api2wire_String(status),
            darkMode,
            _api2wire_f32(fontSize),
            _api2wire_f32(fontSizeIncrement)),
        parseSuccessData: _wire2api_lipl_display,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "gatt_listen",
          argNames: [
            "part",
            "status",
            "darkMode",
            "fontSize",
            "fontSizeIncrement"
          ],
        ),
        argValues: [part, status, darkMode, fontSize, fontSizeIncrement],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

double _wire2api_f32(dynamic raw) {
  return raw as double;
}

LiplDisplay _wire2api_lipl_display(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 4)
    throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
  return LiplDisplay(
    part: _wire2api_String(arr[0]),
    status: _wire2api_String(arr[1]),
    darkMode: _wire2api_bool(arr[2]),
    fontSize: _wire2api_f32(arr[3]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PeripheralWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PeripheralWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PeripheralWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_gatt_listen(
    int port_,
    ffi.Pointer<wire_uint_8_list> part1,
    ffi.Pointer<wire_uint_8_list> status,
    bool dark_mode,
    double font_size,
    double font_size_increment,
  ) {
    return _wire_gatt_listen(
      port_,
      part1,
      status,
      dark_mode ? 1 : 0,
      font_size,
      font_size_increment,
    );
  }

  late final _wire_gatt_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint8,
              ffi.Float,
              ffi.Float)>>('wire_gatt_listen');
  late final _wire_gatt_listen = _wire_gatt_listenPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int, double, double)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
